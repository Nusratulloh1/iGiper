/*
Write your variables here. All available variables can be
found in element-ui/packages/theme-chalk/src/common/var.scss.
For example, to overwrite the theme color:
*/
$--color-primary:#729F40;

/* icon font path, required */
$--font-path: '~element-ui/lib/theme-chalk/fonts';

@import "~element-ui/packages/theme-chalk/src/index";

/*
<template>
    <el-container direction="vertical" v-loading="loading">                            
        <el-row type="flex" justify="center" style="flex-wrap: wrap;">
            <el-col :xs="20" :sm="16" :md="13" :lg="13" :xl="13">
                <h2 style="text-align: center;">{{$t('advertise.title')}}</h2>
                <el-divider></el-divider>
            </el-col>

            <el-col :xs="20" :sm="16" :md="13" :lg="13" :xl="13">
                <el-form ref="adInfo" label-position="top" :model="formData" :rules="rules">
                    <el-form-item prop="title" :label="$t('advertise.product_name')">
                        <el-input v-model="formData.title" :placeholder="$t('advertise.product_name')"></el-input>
                    </el-form-item>
                    <el-form-item prop="dummyPrice" :label="$t('advertise.price')">
                        <el-input id="price" v-model="formData.dummyPrice" :placeholder="$t('advertise.price')"></el-input>                        
                    </el-form-item>
                    
                    <el-form-item prop="currencyId" :label="$t('advertise.currency')">
                        <el-input style="display: none;" v-model="formData.currencyId"></el-input> <!-- for validating -->                        
                        <el-select clearable style="width: 100%" v-model="formData.currencyId" :placeholder="$t('advertise.currency')">
                            <el-option
                            v-for="item in currencies"
                            :key="item.value"
                            :label="item.label"
                            :value="item.value">
                            </el-option>
                        </el-select>
                    </el-form-item>  

                    <!-- <el-form-item :label="$t('advertise.from')">
                        <el-select style="width: 100%" v-model="formData.ownerType" :placeholder="$t('advertise.select')">
                            <el-option
                            v-for="item in ownerTypes"
                            :key="item.value"
                            :label="item.label"
                            :value="item.value">
                            </el-option>
                        </el-select>
                    </el-form-item>                            -->                    
                                        
                    <el-form-item prop="dummyCategory" :label="$t('advertise.category')">
                        
                        <el-input style="display: none;" v-model="formData.dummyCategory"></el-input> <!-- for validating -->                        
                        <el-cascader v-if="adId"
                            class="hidden-sm-and-down"      
                            v-model="formData.categoryId"                                          
                            style="width: 100%"                                                
                            :options="allCategories"
                            :props="{ checkStrictly: true }"
                            clearable></el-cascader
                        >                   
                        
                        <el-cascader v-else
                            class="hidden-sm-and-down"      
                            v-model="formData.categoryId"                                          
                            style="width: 100%"                                                                            
                            :props="categoryProps"
                            @change="onCategorySelected"
                            clearable></el-cascader
                        >                               
                                                
                        <treeselect class="hidden-md-and-up" 
                            v-if="adId"
                            :options="allCategories" 
                            :clearable="false"
                            :multiple="false"                         
                            :placeholder="$t('advertise.category')"
                            v-model="formData.phoneCategoryId" 
                        />
                                                
                        <treeselect class="hidden-md-and-up" 
                            v-else
                            :clearable="false"
                            @select="onCategorySelected"
                            :options="allCategories" 
                            :multiple="false"                         
                            :placeholder="$t('advertise.category')"
                            v-model="formData.phoneCategoryId" 
                        />
                    </el-form-item>                    

                    <!-- START ATTRIBUTES -->

                    <!-- nums -->                                        
                    <el-row v-if="formData.attributes.nums.length > 0" :gutter="15" type="flex" style="flex-wrap: wrap;">
                        <el-col :span="12" v-for="(num, index) in formData.attributes.nums" :key="num.id"> 
                            <el-form-item :label="num.name" prop="num">                                                                                    
                                <el-input @change="activeNumIndex = index" :id="`num_${index}`" :placeholder="`[${num.min}, ${num.max}] (min, max)`" v-model="formData.nums[index].dummy"></el-input>
                            </el-form-item>      
                        </el-col>
                    </el-row>    
                    
                    <!-- strs -->          
                    <el-row v-if="formData.attributes.strs.length > 0" :gutter="15" type="flex" style="flex-wrap: wrap;">
                        <el-col :span="12" v-for="(str, index) in formData.attributes.strs"  :key="str.id">
                            <el-form-item :label="str.name"  prop="str">                            
                                <el-input @change="activeStrIndex = index" :id="`str_${index}`" :placeholder="str.name" v-model="formData.strs[index].dummy"></el-input>
                            </el-form-item>
                        </el-col>
                    </el-row>                                                                                                           

                    <!-- customs -->                                        
                    <el-row v-if="formData.attributes.customs.length > 0" :gutter="15" type="flex" style="flex-wrap: wrap;">
                        <el-col :span="8" v-for="(customExtra, index) in formData.attributes.customs" :key="customExtra.id">
                            <el-form-item :label="customExtra.name"  prop="custom">                                                                                        
                                <el-select style="width: 100%;" v-model="formData.customs[index].value">
                                    <el-option v-for="item in customExtra.custom"
                                        :key="item.value"
                                        :label="item.label"
                                        :value="item.value">                                                                                
                                    </el-option>
                                </el-select>                                                                                                                      
                            </el-form-item>
                        </el-col>
                    </el-row>                                                                                    

                    <el-form-item prop="description" :label="$t('advertise.description')">
                        <el-input style="display: none" v-model="formData.description"></el-input> <!-- for validating -->                        
                        <tinymce-editor api-key="6u2zs29r2mfts4ug14uf8nzj63k7hg6yp3vsddflen298dn2" v-model="formData.description"></tinymce-editor>
                    </el-form-item>       

                    <!-- END ATTRIBUTES -->
                                                                
                    <!-- IMAGES -->
                    <el-form-item>
                        <el-row type="flex" justify="space-between" :gutter="50" style="flex-wrap: wrap">
                            <el-col v-loading="images[0].loading" :xs="12" :sm="12" :md="6" :lg="6">
                                <div :id="'image-box' + 0" class="image-box" @click="selectImageFile(0)">
                                    <img v-if="images[0].url" width="100%" height="120" style="border-radius: 4px; object-fit: cover; object-position: center;" :src="$serverImageUrl + images[0].url" alt="">
                                    
                                    <div v-if="images[0].url">
                                        <i @click="seeImage(images[0].url)" class=el-icon-rank></i>                                    
                                        <i @click="deleteImage(0)" class="el-icon-delete"></i>
                                    </div>

                                    <i v-else class="fas fa-camera no-image-yet"></i>                                

                                    <input type="file" ref="imageFile0" @change="onFileSelected" hidden>
                                </div>              
                            </el-col>
                            <el-col v-loading="images[1].loading" :xs="12" :sm="12" :md="6" :lg="6">
                                <div :id="'image-box' + 1" class="image-box" @click="selectImageFile(1)">
                                    <img  v-if="images[1].url" width="100%" height="120" style="border-radius: 4px; object-fit: cover; object-position: center;" :src="$serverImageUrl + images[1].url" alt="">
                                    
                                    <div v-if="images[1].url">
                                        <i @click="seeImage(images[1].url)" class=el-icon-rank></i>                                                                      
                                        <i @click="deleteImage(1)" class="el-icon-delete"></i>
                                    </div>

                                    <i v-else class="fas fa-camera no-image-yet"></i>                                                       

                                    <input type="file" ref="imageFile1" @change="onFileSelected" hidden>
                                </div>              
                            </el-col>     
                            <el-col v-loading="images[2].loading" :xs="12" :sm="12" :md="6" :lg="6">
                                <div :id="'image-box' + 2" class="image-box" @click="selectImageFile(2)">
                                    <img v-if="images[2].url" width="100%" height="120" style="border-radius: 4px; object-fit: cover; object-position: center;" :src="$serverImageUrl + images[2].url" alt="">
                                    
                                    <div v-if="images[2].url">
                                        <i @click="seeImage(images[2].url)" class=el-icon-rank></i>                                    
                                        <i @click="deleteImage(2)" class="el-icon-delete"></i>
                                    </div>

                                    <i v-else class="fas fa-camera no-image-yet"></i>                                                            

                                    <input type="file" ref="imageFile2" @change="onFileSelected" hidden>
                                </div>              
                            </el-col>     
                            <el-col v-loading="images[3].loading" :xs="12" :sm="12" :md="6" :lg="6">
                                <div :id="'image-box' + 3" class="image-box" @click="selectImageFile(3)">
                                    <img v-if="images[3].url" width="100%" height="120" style="border-radius: 4px; object-fit: cover; object-position: center;" :src="$serverImageUrl + images[3].url" alt="">
                                    
                                    <div v-if="images[3].url">
                                        <i @click="seeImage(images[3].url)" class=el-icon-rank></i>                                                      
                                        <i @click="deleteImage(3)" class="el-icon-delete"></i>
                                    </div>

                                    <i v-else class="fas fa-camera no-image-yet"></i>                                                              

                                    <input type="file" ref="imageFile3" @change="onFileSelected" hidden>
                                </div>
                            </el-col>     
                            <el-col v-loading="images[4].loading" :xs="12" :sm="12" :md="6" :lg="6">
                                <div :id="'image-box' + 4" class="image-box" @click="selectImageFile(4)">
                                    <img v-if="images[4].url" width="100%" height="120" style="border-radius: 4px; object-fit: cover; object-position: center;" :src="$serverImageUrl + images[4].url" alt="">
                                    
                                    <div v-if="images[4].url">
                                        <i @click="seeImage(images[4].url)" class=el-icon-rank></i>                                                       
                                        <i @click="deleteImage(4)" class="el-icon-delete"></i>
                                    </div>

                                    <i v-else class="fas fa-camera no-image-yet"></i>                                                            

                                    <input size="5242880" type="file" ref="imageFile4" @change="onFileSelected" hidden>
                                </div>
                            </el-col>     
                            <el-col v-loading="images[5].loading" :xs="12" :sm="12" :md="6" :lg="6">
                                <div :id="'image-box' + 5" class="image-box" @click="selectImageFile(5)">
                                    <img v-if="images[5].url" width="100%" height="120" style="border-radius: 4px; object-fit: cover; object-position: center;" :src="$serverImageUrl + images[5].url" alt="">
                                    
                                    <div v-if="images[5].url">
                                        <i @click="seeImage(images[5].url)" class=el-icon-rank></i>                                                                    
                                        <i @click="deleteImage(5)" class="el-icon-delete"></i>
                                    </div>
                                    
                                    <i v-else class="fas fa-camera no-image-yet"></i>                                                            

                                    <input type="file" ref="imageFile5" @change="onFileSelected" hidden>
                                </div>        
                            </el-col>     
                            <el-col v-loading="images[6].loading" :xs="12" :sm="12" :md="6" :lg="6">
                                <div :id="'image-box' + 6" class="image-box" @click="selectImageFile(6)">
                                    <img v-if="images[6].url" width="100%" height="120" style="border-radius: 4px; object-fit: cover; object-position: center;" :src="$serverImageUrl + images[6].url" alt="">
                                    
                                    <div v-if="images[6].url">
                                        <i @click="seeImage(images[6].url)" class=el-icon-rank></i>                                                              
                                        <i @click="deleteImage(6)" class="el-icon-delete"></i>
                                    </div>
                                    
                                    <i v-else class="fas fa-camera no-image-yet"></i>                                                                   

                                    <input type="file" ref="imageFile6" @change="onFileSelected" hidden>
                                </div>           
                            </el-col>     
                            <el-col v-loading="images[7].loading" :xs="12" :sm="12" :md="6" :lg="6">
                                <div :id="'image-box' + 7" class="image-box" @click="selectImageFile(7)">
                                    <img v-if="images[7].url" width="100%" height="120" style="border-radius: 4px; object-fit: cover; object-position: center;" :src="$serverImageUrl + images[7].url" alt="">

                                    <div v-if="images[7].url">
                                        <i @click="seeImage(images[7].url)" class=el-icon-rank></i>                                                                      
                                        <i @click="deleteImage(7)" class="el-icon-delete"></i>
                                    </div>

                                    <i v-else class="fas fa-camera no-image-yet"></i>                                                          

                                    <input type="file" ref="imageFile7" @change="onFileSelected" hidden>
                                </div>     
                            </el-col>     
                                   
                        </el-row>                        
                    </el-form-item>

                    <el-form-item>
                        <div id="map" style="width: 100%; height: 300px; z-index: 0;"></div>                        
                    </el-form-item>
                </el-form>                
            </el-col>

            <!-- <el-col :xs="20" :sm="16" :md="13" :lg="13" :xl="13">
                <div class="image-size-note">
                    <span>{{$t('advertise.max_file_size')}} <b>5 MB</b></span>
                </div>
            </el-col> -->

            <!-- <el-col :xs="20" :sm="16" :md="13" :lg="13" :xl="13">
                <h2 style="text-align: center;">{{$t('advertise.contact_info')}}</h2>
                <el-divider></el-divider>
            </el-col>               -->

            <el-col :xs="20" :sm="16" :md="13" :lg="13" :xl="13">                
                <el-form ref="contactInfo" label-position="top" :model="formData"  :rules="rules">
                    
                    <el-form-item prop="dummyRegion" :label="$t('advertise.region')">
                        <el-input style="display: none;" v-model="formData.dummyRegion"></el-input>
                        <el-cascader
                        v-if="adId"
                        class="hidden-sm-and-down"  
                        :placeholder="$t('advertise.region')"    
                        v-model="formData.regionId"                                          
                        style="width: 100%"                                                
                        :options="allRegions"         
                        :props="{ checkStrictly: true }"                                                                                     
                        clearable></el-cascader>  
                        
                        <el-cascader
                        v-else                        
                        class="hidden-sm-and-down"      
                        v-model="formData.regionId"    
                        :placeholder="$t('advertise.region')"                                      
                        style="width: 100%"                                                
                        :props="regionProps"      
                        clearable></el-cascader>                                                                        

                        <treeselect class="hidden-md-and-up" 
                            v-if="adId"
                            :options="allRegions"                            
                            :multiple="false"                              
                            :placeholder="$t('advertise.region')"
                            v-model="formData.phoneRegionId" />
                        
                        <treeselect class="hidden-md-and-up" 
                            v-else
                            :options="allRegions"                            
                            :multiple="false"                                                 
                            :placeholder="$t('advertise.region')"
                            v-model="formData.phoneRegionId" />
                    </el-form-item>

                    <!-- <el-form-item prop="dummyPhone" :label="$t('advertise.phone')">
                        <el-input id="contactPhone" v-model="formData.dummyPhone" :placeholder="$t('advertise.phone')"></el-input>
                    </el-form-item>

                    <el-form-item label="E-mail:" prop="email">
                        <el-input v-model="formData.email" id="email" type="email" placeholder="E-mail"></el-input>
                    </el-form-item>
                    
                    <el-form-item :label="$t('advertise.contact_person')">
                        <el-input v-model="formData2.name" type="text" :placeholder="$t('advertise.title')"></el-input>
                    </el-form-item> -->
                </el-form>
            </el-col>            
        </el-row>

        <el-row type="flex" justify="center" style="flex-wrap: wrap;">
        
            <el-col :xs="20" :sm="16" :md="13" :lg="13" :xl="13">
                <el-checkbox v-model="showTopForm" @change="makeTop" :label="$t('advertise.is_top')" border></el-checkbox>
            </el-col>

            <el-col :xs="20" :sm="16" :md="13" :lg="13" :xl="13">                
                <el-collapse-transition>
                    <div  v-show="showTopForm">
                        <el-row :gutter="10"  :key="updateKey">
                            <el-col :xs="20" :sm="20" :md="8" :lg="8"  style="margin-top: 1rem;" v-for="tariff in tariffs" :key="tariff.id">
                                <div @click="selectTariff(tariff)" >
                                    <el-card :body-style="{ padding: '0px' }" :shadow="tariff.shadow" :style="`cursor: ${wasTop ? 'not-allowed' : 'pointer'}; height: 18rem;`">
                                        <div slot="header" class="clearfix">
                                            <span>{{tariff.title}}</span>                                        
                                        </div>
                                        
                                        <img height="125" width="125" :src="$serverImageUrl + tariff.image" class="image">
                                        
                                        <div class="text">                                                                                                                                    
                                            <div>
                                                <span>{{$t('advertise.price')}}: </span> {{tariff.price}} {{$t('advertise.soum')}}
                                            </div>                         

                                            <div>
                                                <span>{{$t('advertise.day')}}: </span> <span> {{tariff.days}} {{$t('advertise.day')}} </span>
                                            </div>                                                       
                                        </div>

                                        <div style="float: right;  margin-right: 5px">                                        
                                            <transition name="el-zoom-in-center">
                                                <div v-show="tariff.selected">
                                                    <el-button circle type="success" icon="el-icon-check"></el-button>
                                                </div>
                                            </transition>
                                        </div>
                                    </el-card>
                                </div>
                            </el-col>                        
                        </el-row>
                    </div>                    
                </el-collapse-transition>                
            </el-col>
            
        </el-row>

        <el-row type="flex" justify="center" style="flex-wrap: wrap; margin-top: .5rem">
         
            <el-col :xs="20" :sm="16" :md="13" :lg="13" :xl="13">
                <div style="display: flex; flex-wrap: wrap; justify-content: space-between; align-items: center">
                    <span>{{$t('advertise.fields')}}<span style="color: red">*</span> - {{$t('advertise.required')}}</span>
                    <el-button @click="advertise" type="primary">{{$t('advertise.make_announcement')}}</el-button>
                </div>
            </el-col>

        </el-row>

        <el-dialog center :title="$t('basic.fill_balance')" :visible.sync="payDialogVisible" :width="`${size}%`">
            <!-- <el-row type="flex" justify="center" align="center" style="margin-bottom: 0.5rem;">
                <h2>Hisobni to`ldirish</h2>
            </el-row> -->

            <el-row style="margin: 0.5rem 0;">
                <el-form :model="paymentForm" ref="paymentForm"> 
                    <el-form-item prop="dummy" :rules="paymentRules">
                        <el-input id="currency-mask" placeholder="Summa" v-model="paymentForm.dummy"></el-input>
                    </el-form-item>
                </el-form>
            </el-row>
            
            <el-row type="flex" justify="center" :gutter="20">
                <el-col>
                    <div @click="selectPaymentService(1)">
                        <el-card :shadow="clickServiceSelected ? 'always' : 'hover'" :body-style="{ padding: '5px' }">                            
                            <div slot="header" style="padding: 0 14px; float: right; margin-bottom: 0.5rem; height: 2rem">
                                <transition name="el-zoom-in-center">
                                    <div v-show="clickServiceSelected">
                                        <el-button size="small" circle type="primary" icon="el-icon-check"></el-button>
                                    </div>
                                </transition>
                            </div>
                            <img src="@/assets/g-pay.png" class="image">                            
                        </el-card>
                    </div>
                </el-col>
                <el-col>
                    <div @click="selectPaymentService(2)">                        
                        <el-card :shadow="paymeServiceSelected ? 'always' : 'hover'" :body-style="{ padding: '5px' }">
                            <div slot="header" style="padding: 0 14px; float: right; margin-bottom: 0.5rem; height: 2rem">
                                <transition name="el-zoom-in-center">
                                    <div v-show="paymeServiceSelected">
                                        <el-button size="small" circle type="primary" icon="el-icon-check"></el-button>
                                    </div>
                                </transition>
                            </div>
                            <img src="@/assets/img_pay_me.png" class="image">                            
                        </el-card>
                    </div>
                </el-col>
            </el-row>            

            <el-row type="flex" justify="space-around" style="margin-top: 0.5rem">
                <el-button type="danger" @click="closePaymentDialog">{{$t('basic.cancel')}}</el-button>
                <el-button type="primary" @click="redirectPayemntService">{{$t('basic.save')}}</el-button>
            </el-row>
        </el-dialog>

        <el-dialog :visible.sync="dialogVisible">
          <img width="100%" :src="$serverImageUrl + dialogImageUrl" alt="">
        </el-dialog>
    </el-container>
</template>

<script>
import Editor from '@tinymce/tinymce-vue'

// import the component
import Treeselect from '@riophae/vue-treeselect'
// import the styles
import '@riophae/vue-treeselect/dist/vue-treeselect.css'

import { LOAD_CHILDREN_OPTIONS } from '@riophae/vue-treeselect'
import { Message } from 'element-ui'

import IMask from 'imask'
import { constants } from 'crypto';
import { MessageBox } from 'element-ui';

import 'element-ui/lib/theme-chalk/display.css';

import Inputmask from "inputmask";

// We just use `setTimeout()` here to simulate an async operation
// instead of requesting a real API server for demo purpose.
const simulateAsyncOperation = fn => {
  setTimeout(fn, 2000)
}

export default {
    props: {
        adId: {
            type: String | Number,
            default: null
        }
    },

    components: {
        'tinymce-editor': Editor, // <- Important part        
        Treeselect
    },

    data () {
        let checkCategory = (rule, value, callback) => {                                
            
            if (this.formData.categoryId && this.formData.categoryId.length > 0) {
                this.formData.dummyCategory = this.formData.categoryId.length;                
                callback();
            }
            else if (this.formData.phoneCategoryId) {                
                this.formData.dummyCategory = this.formData.phoneCategoryId;            
                callback();
            } else if(this.formData.dummyCategory) {
                callback();
            }else {                
                this.formData.dummyCategory = ''
                callback(new Error(this.$t('rules.required')))
            }
        };

        // let checkDescription = (rule, value, callback) => {            
        //     if (this.formData.description) {
        //         callback();
        //     }else {
        //         callback(new Error(this.$t('rules.required')))
        //     }
        // };        

        let checkRegion = (rule, value, callback) => {                 
            if (this.formData.regionId && this.formData.regionId.length > 0) {
                this.formData.dummyRegion = this.formData.regionId[0]
                callback();
            } else if(this.formData.phoneRegionId) {
                this.formData.dummyRegion = this.formData.phoneRegionId;
            }
            else {                
                this.formData.dummyRegion = ''
                callback(new Error(this.$t('rules.required')))
            }
        };   
        
        let checkNum = (rule, value, callback) => {
            const currentNum = this.formData.nums[this.activeNumIndex];
            
            const dummy = document.getElementById('num_' + currentNum.index).inputmask.unmaskedvalue();  

            if (dummy === '') { //IMaskJS                
                callback(new Error(this.$t('rules.required')));
            }else if (dummy < currentNum.min || dummy > currentNum.max){    
                callback(new Error( `qiymat ${currentNum.min} va ${currentNum.max} orasida bo'lishi kerak `));
            }else {
                callback();
            }
        };

        let checkStr = (rule, value, callback) => {
            const currentStr = this.formData.strs[this.activeStrIndex];                          

            if (currentStr.dummy === '') { 
                callback(new Error(this.$t('rules.required')));
            }else if (currentStr.dummy.length > currentStr.max || currentStr.dummy.length < currentStr.min) {
                callback(new Error( `qiymatning uzunligi ${currentStr.min} va ${currentStr.max} orasida bo'lishi kerak `));
            }else{    
                callback();
            }
        };        

        return { 
            paymentRules: [
                { required: true, message: this.$t('rules.required'), trigger: 'blur' }                
            ],

            paymentForm: {
                paymentSoum: '',
                dummy: 0
            },        

            dummy: '',  

            extras: '',

            defaultProps: {
                children: 'children',
                label: 'label'
            },

            phoneCategoryProps: {
                label: 'name',
                children: 'zones',
                isLeaf: 'leaf'
            },
            
            size: 30,

            moneyInNeed: '',

            clickServiceSelected: true, //selected by default
            paymeServiceSelected: false,

            payDialogVisible: false,

            updateKey: 0,
            
            tariffs: [],
            
            selected: false,

            requestMethod: 'post',

            locationMap: undefined,
            mapMarker: undefined,
            adLocation: {
                lat: 0,
                lng: 0
            },

            showTopForm: false,

            rules: {
                currencyId: [
                    { required: true, message: this.$t('rules.required'), trigger: ['blur', 'change'] }
                ],                        
                
                email: [                    
                    { required: true, required: true, message: this.$t('rules.required'), trigger: ['blur'] },
                    { type: 'email', message: this.$t('rules.correct_email'), trigger: ['blur'] }
                ],

                title: [
                    { required: true, message: this.$t('rules.required'), trigger: 'blur' }
                ],
            
                dummyPrice: [
                    { required: true, message: this.$t('rules.required'), trigger: 'blur' }
                ],

                dummyRegion: [                    
                    { required: true, validator: checkRegion, trigger: ['change', 'blur', 'focus']}
                ],

                dummyCategory: [                    
                    { required: true, validator: checkCategory, trigger: ['change', 'blur', 'focus']}
                ],

                description: [
                    // {required: true, message: this.$t('rules.required'), trigger: 'blur'},
                    // { validator: checkDescription, trigger: 'change'}
                ],

                dummyPhone: [
                    { required: true, message: this.$t('rules.required'), trigger: 'blur' }
                ],

                num: [
                    { required: true, validator: checkNum, trigger: 'blur' }
                ],
                str: [
                    { required: true, validator: checkStr, trigger: 'blur' }
                ]
            },            
            
            formData: { 
                extras: {
                    nums: [],
                    strs: [],
                    customs: []
                },               
                title: '',
                price: '',
                ownerType: 0,
                categoryId: [],
                phoneCategoryId: null,
                phoneRegionId: null,
                regionId: undefined,
                description: '',
                currencyId: undefined,                
                selectedTariff: {},
                dummyCategory: '',
                dummyRegion: '',
                dummyPrice: '',
                dummyPhone: '',
                email: '',
                isTop: false, // this is for clearifing if the product is already a top one

                attributes: {
                    nums: [],
                    strs: [],
                    customs: []
                },

                nums: [],
                strs: [],
                customs: []     
            },

            wasTop: false,

            formData2: {
                phone: '',
                email: '',
                name: '',                
            },
            
            categoryProps: {
                checkStrictly: true,
                lazy: true,                
                
                lazyLoad: this.categoryLazyLoad
            },
            
            regionProps: {
                lazy: true,
                checkStrictly: true,
                
                lazyLoad: (node, resolve) => {   
                             
                    let value = node.value ? node.value : 0;

                    const metadata = {
                        url: 'regions',
                        
                        params: {
                                pId: value,
                                lang: 'uz'
                            }
                    }                    

                    this.$store.dispatch('getData', metadata)
                        .then(response => {                               
                            
                            let nodes = [];

                            if (value) {
                                nodes = response.map(node => ({
                                    value: node.id,
                                    label: node.name
                                }))
                            }else {
                                nodes = response.filter(node => {
                                    return node.parentId === null;
                                }).map(node => ({
                                    value: node.id,
                                    label: node.name
                                }))                                  
                            }                  

                            // Invoke `resolve` callback to return the child nodes data and indicate the loading is finished.
                            resolve(nodes);
                    })                    
                }
            },
            
            selectedCategoryId: '',
            attributeId: '',

            selectedCategories: [],
            selectedRegions: [],

            currencies: [],
            
            categories: [],
            rootRegions: [],
            
            allRegions: [],
            allCategories: [],
            notNesteCategories: [],                    

            notNestedRegions: [],
            
            //for 8 images 
            images: [
                {
                    loading: false,
                    url: '',
                    object: null
                },
                {
                    loading: false,
                    url: '',
                    object: null
                },
                {
                    loading: false,
                    url: '',
                    object: null
                },
                {
                    loading: false,
                    url: '',
                    object: null
                },
                {
                    loading: false,
                    url: '',
                    object: null
                },
                {
                    loading: false,
                    url: '',
                    object: null
                },
                {
                    loading: false,
                    url: '',
                    object: null
                },
                {
                    loading: false,
                    url: '',
                    object: null
                },        
            ],            

            activeImageIndex: 0, // this for having control of the array of images

            dialogImageUrl: '',

            dialogVisible: false,
            
            content: '',            

            ownerTypes: [
                {
                    value: 0,
                    label: this.$t('basic.company')
                }, 
                {
                    value: 1,
                    label: this.$t('basic.person')
                }
            ],

            selectedOwnerType: 0,
            
            activeNumIndex: 0,            
            activeStrIndex: 0,
            activeCustomIndex: 0,        
            
            loading: false,
        }
    },        

    mounted () {           
        
        this.isBan()
            .then(result => {                
                
                if (result === null) {     
                    var im = new Inputmask({regex: '[-0-9]+', placeholder: ''}).mask(document.getElementById("price"));                                                        
                    
                    if (this.adId) { // this means that an ad is going to be editted                                    
                        setTimeout(() => {
                            this.getData(this.adId);
                        }, 1000)
                    }else {
                        this.drawMap();    
                    }

                    this.getCategories();
                    this.getRegions();

                    this.getCurrencies();                        
                    this.getTariffs();

                    this.formData.isTop = false;                        
                }else {
                    
                    Message({
                        type: 'warning',
                        message: this.$t('basic.in_ban'),
                        duration: 5000
                    })
                    
                    this.$router.push({name: 'home'});
                }
            })
            .catch(error => {                
                console.log(error)
            })      
    },

    methods: {                 

        onCategorySelected (region) {                                 
            if (this.$store.state.isMobileVersion) {
                
                let temp2 = '';
                if (Array.isArray(region)) {
                    temp2 = [...region].pop();
                }else if (typeof region === 'object') {                    
                    temp2 = region.id;                    
                }
                                
                let temp = this.notNesteCategories.find(data => data.id == temp2);                
                region = this.makeTree(temp, this.notNesteCategories);                        
                
                if (region.length == 2 && region[0] === region[1]) {
                    region.pop();
                } 
            }

            this.formData.dummyCategory = region[0];
            this.selectedCategoryId = [...region].pop(); 
                        
            const metadata = {
                url: 'attributes',
                params: {
                    id: region.join(',')                    
                }
            }            

            this.$store.dispatch('getData', metadata)
                .then(response => {          
                                            
                    this.formData.attributes.nums = [];
                    this.formData.attributes.strs = [];
                    this.formData.attributes.customs = [];

                    this.formData.nums = [];
                    this.formData.strs = [];
                    this.formData.customs = [];                                        

                    let numIndex = 0;
                    let strIndex = 0;
                    let customIndex = 0;

                    for (let index = 0; index < response.length; index++) {
                        const element = response[index];
                        
                        if (element.type == 1) { //number                            
                            this.formData.attributes.nums.push(element);                            
                            this.formData.nums.push({
                                value: undefined,
                                dummy: '',
                                min: element.min,
                                max: element.max,
                                index: numIndex++,
                                id: element.id                                
                            });                                                 
                        }else if (element.type == 2) { //string
                            this.formData.attributes.strs.push(element);
                            this.formData.strs.push({
                                value: undefined,
                                dummy: '',
                                index: strIndex++,
                                min: element.min,
                                max: element.max,
                                id: element.id
                            });          
                        }else {//custom                            
                            this.formData.attributes.customs.push(element);
                            this.formData.customs.push({
                                value: 0,
                                id: element.id                
                            });
                        }
                    }                                                  
                    
                    this.formData.attributes.customs.forEach(data => {
                        let _customIndex = 0;
                        data.custom = data.custom.map(element => {                            
                            return {
                                value: _customIndex++,
                                label: element,
                                id: element.id
                            }
                        });
                    });                    

                    setTimeout(() => {                
                        for (let index = 0; index < this.formData.nums.length; index++) {
                            const element = this.formData.nums[index];
                            
                            // element.value = IMask(document.getElementById('num_' + index), {
                            //     mask: Number,
                            //     min: this.formData.attributes.nums[index].min,
                            //     max: this.formData.attributes.nums[index].max,
                            //     thousandsSeparator: ' '
                            // })

                            //let a = Inputmask({regex: `[-0-9]+{${this.formData.attributes.nums[index].min}, ${this.formData.attributes.nums[index].max}}`, placeholder: ''}).mask('num_' + index);
                            let a = Inputmask({regex: `[1-9]*`, placeholder: ''}).mask('num_' + index);
                        }          

                        if (this.adId) {                            
                            
                            for(let index = 0; index < this.extras.nums.length; index++) {                                
                                this.formData.nums[index].dummy = this.extras.nums[index].value;
                                this.formData.nums[index].id = this.extras.nums[index].id;
                                this.formData.nums[index].attributeId = this.extras.nums[index].attributeId;
                            }

                            for(let index = 0; index < this.extras.strs.length; index++) { 
                                this.formData.strs[index].id = this.extras.strs[index].id;                               
                                this.formData.strs[index].dummy = this.extras.strs[index].value;
                                this.formData.strs[index].attributeId = this.extras.strs[index].attributeId;
                            }

                            for(let index = 0; index < this.extras.customs.length; index++) {   
                                this.formData.customs[index].id = this.extras.customs[index].id;                             
                                this.formData.customs[index].dummy = this.extras.customs[index].value;
                                this.formData.customs[index].attributeId = this.extras.customs[index].attributeId;
                            }
                        }

                    }, 1000)                                             
                })
                .catch(error => {
                    console.log("ERRROR")
                    console.log(error);
                })
                .finally(() => {
                    console.log("ASSALOM")
                })
        },

        isBan () {            
            
            return new Promise((resolve, reject) => {
                const metadata = {
                    url: 'user/ban',
                    token: this.$store.state.userInfo.token
                }

                this.$store.dispatch('getData', metadata)
                    .then(response => {
                        
                        if (!response) {
                            resolve(response);
                        }else {
                            reject(response);
                        }                    

                    })
                    .catch(error => {
                        reject(error);
                    })
            })
        },

        handleCategoryClick(data) { // for phone size screens, make tree of categoryIds            
            let tree = [];

            if (this.adId) {
                let obj = {
                    id: data.value,
                    parentId: data.parentId
                }
                
                do {

                    tree.push(obj.id);
                    for (let index = 0; index < this.notNesteCategories.length; index++) {
                        const element = this.notNesteCategories[index];

                        if (obj.parentId == element.id) {
                            console.log(element);
                            
                            obj.id = element.id;
                            obj.parentId = element.parentId;
                            break;
                        }                    
                    }                
                }while( obj.parentId !== null);

                tree.push(obj.id);
            }else {
                let parentObj = {
                    value: data.value,
                    parent: data.parent
                }            
                
                do {                
                    tree.push(parentObj.value);

                    parentObj = parentObj.parent;
                }while(parentObj !== null);                
            }

            this.formData.phoneCategoryId = tree.reverse();                
        },

        loadNode(node, resolve) {            
            let value = node.data && node.data.value ? node.data.value : null;            
                                                            
            const metadata = {
                url: 'categories',
                    params: {
                        pId: value,
                        lang: 'uz'
                    }
                }

            this.$store.dispatch('getData', metadata)
                .then(response => {                                                 

                    let nodes = [];

                    if (value) {
                        nodes = response.map(the_node => ({                                
                            value: the_node.id,                     
                            name: the_node.name,
                            parent: node.data                            
                        }))                                
                    }else {
                    
                        nodes = response.filter(the_node => {
                            return the_node.parentId === null;
                        }).map(the_node => ({                                          
                            value: the_node.id,           
                            name: the_node.name,                            
                            parent: node.data
                        }))               
                    }                                                                                                                        
                    
                    // Invoke `resolve` callback to return the child nodes data and indicate the loading is finished.
                    resolve(nodes);
                })                    

        },

        openPaymendDialog () {                    

            this.payDialogVisible = true;

            setTimeout(() => {
                this.paymentForm.paymentSoum = IMask(
                document.getElementById('currency-mask'),
                {
                    mask: Number,
                    min: 1000,
                    max: 10000000,
                    thousandsSeparator: ' '
                }
            )
            }, 1000)
        },

        closePaymentDialog () {
            this.paymentForm.dummy = 0;
            this.payDialogVisible = false;
        },

        redirectPayemntService () {            
            this.$refs.paymentForm.validate(valid => {
                if (valid) {
                    if (this.clickServiceSelected) {
                        Message({
                            type: 'info',
                            message: this.$t('profile.info.coming_soon'),
                            duration: 5000
                        })

                        return;
                    }

                    this.paymentLoading = true;
                    const metadata = {
                        url: 'checkout',                        
                        params: {
                            amount: this.paymentForm.paymentSoum.unmaskedValue * 100, // the server need every single amount of money
                            method: this.clickServiceSelected ? 1 : 0 // click is 1 payme is 0
                        },
                        token: this.$store.state.userInfo.token
                    }

                    this.$store.dispatch('getData', metadata)
                        .then(response => {
                            window.open(response);  
                        })
                        .catch(error => {

                        })
                        .finally(() => {
                            this.paymentLoading = true;
                        })
                }
            })
        },

        selectPaymentService (value) {            
            // value 1 -> Click
            // value 2 -> Payme

            if (value == 1) {
                this.paymeServiceSelected = false;
                this.clickServiceSelected = true;
            }else {
                this.clickServiceSelected = false;
                this.paymeServiceSelected = true;
            }
        }, 

        makeTop (value) {            
            if (!value) {
                for (let index = 0; index < this.tariffs.length; index++) {
                    const tariff = this.tariffs[index];
                    
                    tariff.shadow = 'hover';
                    tariff.selected = false;
                }
                
                this.formData.selectedTariff.id = -1;
                this.formData.selectedTariff.balance = 0;
            }else {                
                this.tariffs[0].selected = true;
                this.tariffs[0].shadow = 'always';
                this.formData.selectedTariff.id = this.tariffs[0].id;
            }
        },

        selectTariff (item) {                                       
            if (this.wasTop) {
                Message({
                    type: 'error',
                    message: this.$t('advertise.cannot_change_tariff'),
                    duration: 5000
                })
                return;
            }

            for (let index = 0; index < this.tariffs.length; index++) {
                const tariff = this.tariffs[index];
                
                tariff.shadow = 'hover';
                tariff.selected = false;
            }        
            
            item.selected = !item.selected;
            item.shadow = 'always';            

            this.formData.selectedTariff = item;

            this.updateKey++;
        },

        getTariffs () {
            const metadata = {
                url: 'rates',
                params: {
                    lang: 'uz',                    
                },
                token: this.$store.state.userInfo.token
            }

            this.$store.dispatch('getData', metadata)
                .then(response => {                                      
                    this.tariffs = response;

                    this.tariffs.forEach(tariff => {
                        tariff.selected = false;
                        tariff.shadow = 'hover';
                    })                    
                    this.tariffs[0].selected = true;
                    this.tariffs[0].shadow = 'always';
                })
        },

        categoryLazyLoad (node, resolve) {     
                    
            let value = node.value ? node.value : null;
                                                
            const metadata = {
            url: 'categories',
                params: {
                    pId: value,
                    lang: 'uz'
                }
            }

            this.$store.dispatch('getData', metadata)
                .then(response => {                                                           
                    let nodes = [];

                    if (value) {
                        nodes = response.map(node => ({
                            value: node.id,
                            label: node.name,
                            leaf: node.isLast
                        }))                                
                    }else {
                    
                        nodes = response.filter(node => {
                            return node.parentId === null;
                        }).map(node => ({
                            value: node.id,
                            label: node.name,
                            leaf: node.isLast
                        }))                                
                    }                                                        
                    
                    // Invoke `resolve` callback to return the child nodes data and indicate the loading is finished.
                    resolve(nodes);
                })                    
        },

        onLocationChosen (location) {
            this.adLocation = location.latlng;            
                        
            if (this.mapMarker !== undefined){                
                this.locationMap.removeLayer(this.mapMarker);
            }                        
            
            this.mapMarker = L.marker([location.latlng.lat, location.latlng.lng]).addTo(this.locationMap)
                .bindPopup(`<b>${this.formData.title}</b>`).openPopup();                        //${this.$t('advertise.popup')}.
        },

        drawMap () {

            const location = {
                lat: this.adLocation.lat ? this.adLocation.lat : 41.311081,
                lng: this.adLocation.lng ? this.adLocation.lng : 69.240562
            }

            this.locationMap = L.map('map', { zoomControl:true, fullscreenControl: true, }).setView([location.lat, location.lng], 13.5);

            L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
                maxZoom: 18,
                attribution: 
                    'Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                id: 'mapbox.streets'
            }).addTo(this.locationMap);
            
            if (this.adLocation.lat && this.adLocation.lng) {
                const location = {
                    latlng: this.adLocation
                }
                console.log("SALMOlar")
                this.onLocationChosen(location);
            }

            this.locationMap.addEventListener('click', this.onLocationChosen);
        },        

        getData (id) {    
            this.loading = true;        
            const metadata = {
                url: 'product',
                params: {
                    lang: 'uz',
                    productId: id
                }
            }
            this.$store.dispatch('getData', metadata)
                .then(response => {                                                          

                    this.requestMethod = 'put';           
                    this.formData.title = response.product.name;
                    
                    this.formData.dummyPrice = response.product.price;                                                                                                                                                                
                                        
                    this.formData.currencyId = response.currency.id;                    

                    this.formData.description = response.product.description;

                    this.formData.ownerType = response.product.type;                    
                    
                    this.adLocation = response.product.location;                       
                    
                    for (let index = 0; index < response.product.images.length; index++) {
                        const image = response.product.images[index];
                        
                        this.images[index].url = image;                        
                    }                                        
                    
                    this.formData.categoryId = response.categories.map(category => {
                        return category.id;
                    })      

                    this.formData.regionId = response.regions.map(region => {
                        return region.id;
                    })

                    // this.formData.regionId = this.formData.regionId.reverse();
                    // this.formData.categoryId = this.formData.categoryId.reverse();
                    
                    //this.formData.extras.nums = response.extras.filter(data => );                    

                    for (let index = 0; index < response.extras.length; index++) {
                        const element = response.extras[index];
                        
                        if (element.type == 1) {
                            this.formData.extras.nums.push(element);
                        }else if (element.type == 2) {
                            this.formData.extras.strs.push(element);
                        }else {
                            this.formData.extras.customs.push(element);
                        }
                    }

                    this.extras = this.formData.extras;

                    console.log(this.formData.extras);

                    // if (response.extras) {
                    //     this.formData.attributes.nums = [];
                    //     this.formData.attributes.strs = [];
                    //     this.formData.attributes.customs = [];

                    //     this.formData.nums = [];
                    //     this.formData.strs = [];
                    //     this.formData.customs = [];

                    //     let numIndex = 0;
                    //     let strIndex = 0;
                    //     let customIndex = 0;
                                                
                    //     for (let index = 0; index < response.extras.length; index++) {
                    //         const element = response.extras[index];
                            
                    //         if (element.type == 1) { //number       
                                 
                    //             this.formData.attributes.nums.push(element);                            
                    //             this.formData.nums.push({
                    //                 oldValue: element.value,
                    //                 value: element.value,
                    //                 dummy: element.value,
                    //                 index: numIndex++,
                    //                 id: element.id,
                    //                 attributeId: element.attributeId
                    //             });      
                                                                             
                    //         }else if (element.type == 2) { //string
                    //             this.formData.attributes.strs.push(element);
                    //             this.formData.strs.push({
                    //                 value: element.value,
                    //                 dummy: element.value,
                    //                 index: strIndex++,
                    //                 min: element.min,
                    //                 max: element.max,
                    //                 id: element.id,
                    //                 attributeId: element.attributeId
                    //             });          
                    //         }else {//custom                            
                    //             this.formData.attributes.customs.push(element);
                    //             this.formData.customs.push({
                    //                 value: parseInt(element.value),
                    //                 id: element.id,
                    //                 attributeId: element.attributeId                 
                    //             });
                    //         }
                    //     }                                                  
                        
                    //     this.formData.attributes.customs.forEach(data => {
                    //         let _customIndex = 0;
                    //         data.custom = data.custom.map(element => {                            
                    //             return {
                    //                 value: _customIndex++,
                    //                 label: element,
                    //                 id: element.id
                    //             }
                    //         });
                    //     });                    

                    //     console.log(this.formData.extras);
                    //     console.log(this.formData.attributes)
                        
                    //     setTimeout(() => {                                                              
                    //         for (let index = 0; index < this.formData.nums.length; index++) {
                    //             const element = this.formData.nums[index];
                    //             const value = element.oldValue;                                                                                                    
                    //             element.value = IMask(document.getElementById('num_' + index), {
                    //                 mask: Number,
                    //                 min: this.formData.attributes.nums[index].min,
                    //                 max: this.formData.attributes.nums[index].max,
                    //                 thousandsSeparator: ' '
                    //             })

                    //             element.value.unmaskedValue = value;                                                                                              
                    //         }                    
                            
                    //         console.log("RESPONSE1232321231")
                    //         console.log(this.formData.attributes)

                    //     }, 1000)                                 
                        
                    //     console.log("RESPONSE1232321231")
                    //     console.log(this.formData.attributes)
                    // }
                                                                                     
                    
                    //this.onCategorySelected(this.formData.categoryId)
                    this.selectedCategoryId = [...this.formData.categoryId].pop();
                    
                    this.formData.phoneCategoryId = [...this.formData.categoryId].pop();                    

                    this.formData.phoneRegionId = [...this.formData.regionId].pop();

                    if (this.formData.categoryId.length > 0) {
                        this.formData.dummyCategory = this.formData.categoryId[0];
                    }
                    
                    if (this.formData.regionId.length > 0) {
                        this.formData.dummyRegion = this.formData.regionId[0];
                    }

                    if (response.product.rateId) { // ad is top
                        this.showTopForm = true;

                        let tariff = this.tariffs.find(tariff => {
                            return response.product.rateId == tariff.id;
                        })

                        this.selectTariff(tariff);
                        this.wasTop = true;
                        this.formData.isTop = true;
                    }else {
                        this.formData.isTop = false;
                    }                                                                      

                    this.onCategorySelected(this.formData.categoryId);
                    this.drawMap();                    
                })
                .catch(error => {

                })
                .finally(() => {
                    this.loading = false;
                })
        },

        //this is for the server that gets every item seperating with a comma, so turn an array into commas of string
        makeStringOfCommas(array) {
            let string = '';

            for (let index = 0; index < array.length; index++) {
                const element = array[index];
                
                string += element;

                if (index < array.length - 1) {
                    string += ','
                }
            }

            return string;
        },

        getProfileData () {
            const metadata = {
                url: 'user',
                token: this.$store.state.userInfo.token
            }

            this.$store.dispatch('getData', metadata)
                .then(response => {
                    //this.$store.commit('SET_USER_INFO', response);                    
                })
                .catch(error => {

                })
        },

        // this is for the treeselect that makes a tree of categories and regions, like item, itemParent, itemGrandParent...
        makeTree(data, items) {

            let tree = [];
            let obj = {             
                id: data.id,
                parentId: data.parentId
            }

            console.log("DATA")
            console.log(data)
            console.log(items)

            let index = 0;
            
            do {

                index++;

                tree.push(obj.id);
                for (let index = 0; index < items.length; index++) {
                    const element = items[index];

                    if (obj.parentId === element.id) {                        
                        
                        obj.id = element.id;
                        obj.parentId = element.parentId;
                        break;
                    }                    
                }              
                
                console.log("SSSSSSSSSSSSSss")
            }while( index < 1000);

            tree.push(obj.id);

            console.log("REVERSE")
            console.log(tree)
            return tree.reverse();
        },

        uploadImage(imageObj) {
            return new Promise((resolve, reject) => {
                let myData = new FormData();

                myData.append('image', imageObj);
                
                const metadata = {
                    url: 'upload/image',
                    method: 'post',
                    params: {
                        dir: 'products'
                    },
                    data: myData                    
                }

                this.$store.dispatch('setData', metadata)
                    .then(response => {
                        
                        resolve(response);
                    })
                    .catch(e => {
                        reject();
                    })
            })
        },

        getCurrencies () {
            const metadata = {
                url: 'currencies',
                params: {
                    lang: 'uz'
                }
            }

            this.$store.dispatch('getData', metadata)
                .then(response => {
                    this.currencies = response.map((currency) => {                        
                        return {
                            value: currency.id,
                            label: currency.name
                        }
                    })
                })
        },

        advertise () {                            
            this.$refs.contactInfo.validate(); // for the user to see, if the first fomrData is not correctly filled then the second formData cannot be validated            
            this.$refs.adInfo.validate((valid) => {                                
                if (valid) {                                                                                                                          
                            // ad is top, so the selected top tariff`s price should be compared with the user`s balance
                            // if there is not enough amount of money ( balance ), the user should be informed about it
                            // and no other action should be taken, just return                               
                            if (this.formData.selectedTariff.id > 0 && parseInt(this.formData.selectedTariff.price) > parseInt(this.$store.state.userInfo.balance)) {
                                
                                Message({
                                    type: "error",
                                    message: this.$t('advertise.balance_not_enough'),
                                    duration: 5000
                                });

                                this.moneyInNeed = parseInt(this.formData.selectedTariff.price) - parseInt(this.$store.state.userInfo.balance);

                                this.openPaymendDialog();

                                return;
                            }

                            let images = [];

                            for(let index = 0; index < this.images.length; index++) {
                                const element = this.images[index];

                                if (element.url) {
                                    images.push(element.url);                                                
                                }   
                            }                                                                                                                                                                                                                     
                            
                            let regionId = [];                            

                            if (this.$store.state.isMobileVersion) {

                                if (this.formData.phoneRegionId) {
                                                
                                let temp = this.notNestedRegions.find((data) => {
                                    return data.id == this.formData.phoneRegionId;
                                });

                                let temp2 = 0;
                                do {
                                    temp2++;
                                    for (let index = 0; index < this.notNestedRegions.length; index++) {
                                        const element = this.notNestedRegions[index];
                                        
                                        if (element.id == temp.parentId) {
                                            regionId.push(temp.id);
                                            temp = element;
                                            break;
                                        }
                                    }                
                                }while(temp.parentId == 0 || temp.parentId);

                                    regionId.push(temp.id);

                                    regionId = regionId.join(',');
                                }

                            }else {
                                regionId = this.formData.regionId ? this.formData.regionId.join(',') : null;
                            }


                            let categoryId = [];

                            if (this.$store.state.isMobileVersion) {

                                if (this.formData.phoneCategoryId) {
                                                
                                let temp = this.notNesteCategories.find((data) => {
                                    return data.id == this.formData.phoneCategoryId;
                                });

                                let temp2 = 0;
                                do {
                                    temp2++;
                                    for (let index = 0; index < this.notNesteCategories.length; index++) {
                                        const element = this.notNesteCategories[index];
                                        
                                        if (element.id == temp.parentId) {
                                            categoryId.push(temp.id);
                                            temp = element;
                                            break;
                                        }
                                    }                
                                }while(temp.parentId == 0 || temp.parentId);

                                    categoryId.push(temp.id);

                                    categoryId = categoryId.join(',');
                                }

                            }else {
                                categoryId = this.formData.categoryId ? this.formData.categoryId.join(',') : null;
                            }                            
                            
                            let extras = [];                     
                            console.log("EXTRAS")              
                            console.log(this.formData)
                            for (let index = 0; index < this.formData.nums.length; index++) {
                                const element = this.formData.nums[index];     
                                                                
                                console.log(document.getElementById('num_' + element.index))
                                const dummy = document.getElementById('num_' + element.index).inputmask.unmaskedvalue();                                

                                if (this.requestMethod === 'post') {
                                    extras.push({
                                        type: 1,
                                        value: dummy,
                                        categoryId: this.selectedCategoryId,                                    
                                        attributeId: element.id                                        
                                    })
                                }else {
                                    extras.push({
                                        type: 1,
                                        value: dummy,
                                        categoryId: this.selectedCategoryId,                                    
                                        id: element.id,
                                        attributeId: element.attributeId                                                                 
                                    })
                                }                                
                            }

                            // this.formData.nums.push({
                            //         oldValue: element.value,
                            //         value: undefined,
                            //         dummy: element.value,
                            //         index: numIndex++,
                            //         id: element.id,
                            //         attributeId: element.attributeId
                            //     });      

                            for (let index = 0; index < this.formData.strs.length; index++) {
                                const element = this.formData.strs[index];

                                if (this.requestMethod === 'post') {
                                    extras.push({
                                        type: 2,
                                        value: element.dummy,
                                        categoryId: this.selectedCategoryId,                                    
                                        attributeId: element.id                                        
                                    })
                                }else {
                                    extras.push({
                                        type: 2,
                                        value: element.dummy,
                                        categoryId: this.selectedCategoryId,                                    
                                        attributeId: element.attributeId,
                                        id: element.id
                                    })
                                }
                            }

                            for (let index = 0; index < this.formData.customs.length; index++) {
                                const element = this.formData.customs[index];

                                if (this.requestMethod === 'post') {
                                    extras.push({
                                        type: 3,
                                        value: element.value,
                                        categoryId: this.selectedCategoryId,
                                        attributeId: element.id
                                        //attributeId: element.attributeId         
                                    })
                                }else {
                                    extras.push({
                                        type: 3,
                                        value: element.value,
                                        categoryId: this.selectedCategoryId,
                                        id: element.id,
                                        attributeId: element.attributeId         
                                    })
                                }
                            }                                                        

                            let price = 0;                            

                            if (!Number.isNaN(this.formData.dummyPrice)) {
                                price = this.formData.dummyPrice;
                            }else {
                                price = this.formData.dummyPrice.replace(/ /g, '');
                            }

                            price = parseInt(price);                            
                            
                            const product = {
                                id: this.adId,
                                categoryId,
                                regionId,                                    
                                currencyId: this.formData.currencyId,                                    
                                //contactName: this.formData2.name,
                                description: this.formData.description,
                                type: this.formData.ownerType,
                                price,
                                name: this.formData.title,
                                //contactPhone: this.formData.dummyPhone,
                                //contactEmail: this.formData.email,
                                location: this.adLocation,
                                images: images.length > 0 ? images : null,
                                rateId: (this.formData.selectedTariff.id >= 0 && !this.formData.isTop) ? this.formData.selectedTariff.id : null,
                            }                            

                            const metadata = {
                                url: 'product',
                                method: this.requestMethod,
                                data: {
                                    product,
                                    extras
                                },
                                token: this.$store.state.userInfo.token
                            }         
                                                        

                            this.$store.dispatch('setData', metadata)
                                .then(response => {                                    
                                    let message = this.$t('advertise.ad_success');
                                    if (this.adId) {
                                        message = this.$t('advertise.ad_update_success')
                                    }
                                    Message({
                                        type: 'success',
                                        message: message,
                                        duration: 5000
                                    });

                                    this.clearFormData();

                                    this.getProfileData();

                                    this.$router.push({name: 'profile', params: {activeTab: 2}});
                                })
                                .catch(error => {

                                    console.log(error)

                                    Message({
                                        type: 'error',
                                        message: this.$t('advertise.cannot_send_to_server'),
                                        duration: 5000
                                    })
                                })
                                .finally(() => {
                                    document.body.scrollIntoView({behavior: 'smooth', block: 'start'});
                                })

                        

                    
                }else {
                    Message({
                        type: 'error',
                        message: this.$t('advertise.fill_form_error'),
                        duration: 5000
                    })
                    document.body.scrollIntoView({behavior: 'smooth', block: 'start'});
                }     
            })
        },

        clearFormData () {
            this.formData.title = '';
            this.formData.price = '';
            this.formData.ownerType = 0;
            this.formData.categoryId = undefined;
            this.formData.regionId = undefined;
            this.formData.description = '';
            this.formData.currencyId = undefined;                                            
            
            this.wasTop = false;
            
            //images            
            for (let index = 0; index < this.images.length; index++) {
                const image = this.images[index];
                
                image.url = '';
                image.object = null;
                image.loading = false;
            }            
        },                

        loadOptions({ action, parentNode, callback }) {
            // Typically, do the AJAX stuff here.
            // Once the server has responded,
            // assign children options to the parent node & call the callback.

            if (action === LOAD_CHILDREN_OPTIONS) {
                
                //check if this is a new array in other words a new root category
                for (let index = 0; index < this.categories.length; index++) {
                    const element = this.categories[index];

                    if (element.id == parentNode.parentId) {
                        this.selectedCategories = [];
                        this.selectedCategories.push(element.id);
                        break;                        
                    }                    
                }

                const metadata = {
                    url: 'categories',
                    params: {
                        pId: parentNode.id,
                        lang: 'uz'
                    }
                }

                this.$store.dispatch('getData', metadata)
                    .then(response => {                                        
                        
                        const subCategories = response;
                            
                        let nodes = subCategories.map(subCategory => ({
                            parentId: subCategory.parentId,
                            id: subCategory.id,
                            label: subCategory.name,
                            children: null
                        }));

                        parentNode.children = nodes;                        
                        
                        callback();
                    })
                    .catch(exception => {
                        callback(exception);
                    })
                               
            }
        },
        
        loadRegionsOptions({ action, parentNode, callback }) {
            // Typically, do the AJAX stuff here.
            // Once the server has responded,
            // assign children options to the parent node & call the callback.                   
            if (action === LOAD_CHILDREN_OPTIONS) {
                //check if this is a new array in other words a new root region
                for (let index = 0; index < this.categories.length; index++) {
                    const element = this.categories[index];
                    
                    if (element.id == parentNode.id) {
                        this.selectedRegions = [];                        
                        break;                        
                    }                    
                }
                
                const metadata = {
                    url: 'regions',
                    params: {
                        pId: parentNode.id,
                        lang: 'uz'
                    }
                }

                this.$store.dispatch('getData', metadata)
                    .then(response => {                        
                        const subCategories = response;
                            
                        let nodes = subCategories.map(subCategory => ({
                            parentId: subCategory.parentId,
                            id: subCategory.id,
                            label: subCategory.name,
                            children: null
                        }));

                        parentNode.children = nodes;                        

                        callback();
                    })
                    .catch(exception => {
                        callback(exception);
                    })
                               
            }
        },

        selectImageFile (index) {
            this.activeImageIndex = index; 
            
            // if image is already selected the user cannot override it. 
            // In order to override an image one needs to delete previous image
            // and select the new one 
            if (!this.images[index].url) { 
                this.$refs['imageFile' + index].click();
            }            
        },

        getNestedChildren(arr, parent) {
            let out = [];
            for(let i in arr) {
                if(arr[i].parentId == parent) {
                    let children = this.getNestedChildren(arr, arr[i].value);

                    if(children.length) {
                        arr[i].children = children;                        
                    }
                    out.push(arr[i]);
                }
            }
            return out
        },

        getCategories () {
            
            const metadata = {
                url: 'categories',
                params: {
                    lang: 'uz'
                }                
            }

            this.$store.dispatch('getData', metadata)
                .then(response => {
                    // those that don`t have parentId are root categories 

                    this.notNesteCategories = response;
                    
                    this.categories = response.filter(category => {
                        return category.parentId === null;
                    }).map(category => {
                        return {
                            id: category.id,
                            label: category.name,
                            parentId: category.parentId,
                            children: null
                        }
                    });        
                    response = response.map(data => {
                        return {
                            id: data.id,
                            value: data.id,
                            label: data.name,
                            parentId: data.parentId
                        }
                    });
                    
                    this.allCategories = this.getNestedChildren(response, null);          
                    
                    console.log("CATEGORIES");
                    console.log(this.notNesteCategories)
             })    
        },

        seeImage (imageUrl) {
            this.dialogImageUrl = imageUrl;
            this.dialogVisible = true;
        },

        onFileSelected (event) {
            this.images[this.activeImageIndex].loading = true;
            this.images[this.activeImageIndex].object = event.target.files[0];   

            const fileReader = new FileReader();

            fileReader.addEventListener('load', () => {
                //this.images[this.activeImageIndex].url = fileReader.result;                
                this.uploadImage(this.images[this.activeImageIndex].object)
                    .then(response => {                        
                        this.images[this.activeImageIndex].url = response;
                        this.images[this.activeImageIndex].loading = false;
                    })
            });

            fileReader.readAsDataURL(this.images[this.activeImageIndex].object);    
            
            document.getElementById('image-box' + this.activeImageIndex).style.cursor = 'default';
        },

        deleteImage (index) {
            let image = document.getElementById('image-box' + index).getElementsByTagName('img')[0];
                                    
            image.style.transition = '1s';
            image.style.transform = 'translateY(-101%)';

            setTimeout(() => {
                this.images[index].url = '';
                this.images[index].object = null;
            }, 1000);
        },

        getRegions () {      
            const metadata = {
                url: 'regions',
                params: {
                  lang: 'uz'
                }
            }

            this.$store.dispatch('getData', metadata)
                .then(response => {         
                    this.notNestedRegions = response;     

                    this.rootRegions = response.filter(region => {
                        return region.parentId === null; // those whose parentIds are null are root regions
                    })
                
                    this.rootRegions = this.rootRegions.map(region => {                        
                        return {              
                            label: region.name,  
                            id: region.id,
                            parentId: region.parentId,
                            children: null
                        } 
                    })      
                              
                    response = response.map(data => {
                        return {
                            id: data.id,
                            value: data.id,
                            label: data.name,
                            parentId: data.parentId
                        }
                    });

                    this.allRegions = this.getNestedChildren(response, null);
                   
                   console.log("REGIONS")
                   console.log(this.allRegions)
                })      
            },
        },            

    watch: {
        'formData.phoneRegionId': function(value) {
            this.formData.dummyRegion = value;
        }
    }

}
</script>

<style lang="scss" scoped>
    @import '../custom.scss';      

    .el-card {
        cursor: pointer;

        .text {
            display: flex;
            flex-direction: column;
            padding: 10px;
        }
    }

    .image-size-note {
        background: $primary-color; 
        padding: 25px; 
        border-radius: 5px;
    }

    .image-box {        
        cursor: pointer;
        position: relative;
        height: 120px;
        border: #495057 solid 1px;
        border-radius: 3.5px;
        margin-top: 1rem;        
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;      

        img {
            filter: none;
            transition: filter .5s;            
        }


        div {            
            top: 100%;
            position: absolute;            
            transition: transform .5s;
            
            width: 100%;
            display: flex;
            justify-content: center;              
             
            padding: 3px;   

            i {
                cursor: pointer;                
                border-radius: 50%;
                background: black;
                color: #ECECEC;   
                padding: 7px;
                margin: 0 4px;
                height: 100%;   
                transition: .3s; 
                position: relative;               
            }
                
            i:hover{
                border-radius: 70%;
                border-color: white;
                border-width: 1px;
                border-style: solid;
            }                                    
        }         

        i.no-image-yet {
            font-size: 3rem;
        }

        //HOVER 
        &:hover i.no-image-yet {
            color: $primary-color;
        }        

        &:hover div{                        
            transform: translateY(-100%);
        }

        &:hover img {
            filter: blur(2px);
        }
    }
    
</style>


*/